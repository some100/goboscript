{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"goboscript","text":"<p>Installation and documentation</p> <p>goboscript is a text-based programming language which compiles to Scratch. It allows you to write Scratch projects in text, and compile it into a .sb3 file - which can be opened in the Scratch editor, TurboWarp or be uploaded to the Scratch website.</p> <p>goboscript allows you to create advanced Scratch projects with ease, you can use any text editor, use a version control system such as git. You can refactor your code using search and replace. Text code can be copy pasted, which allows you to easily reuse code or share it with others. goboscript syntax is concise and easy to read.</p> <p>goboscript allows you to integrate external tooling and workflows, such as using a script to generate costumes for a text rendering engine. Or loading in images into lists.</p> <p>goboscript has a powerful macro system - similar to Rust's macro system. This allows you to write macros to generate code.</p> <p>goboscript is more than just an 1:1 mapping of Scratch blocks to text, it also has additional features like local variables for procedures (custom blocks).</p> <p>goboscript also performs optimizations, detects problems and unused code.</p>"},{"location":"#sister-projects","title":"Sister Projects","text":""},{"location":"#package-manager","title":"Package Manager","text":""},{"location":"#decompiler","title":"Decompiler","text":""},{"location":"#contributing","title":"Contributing","text":"<p>goboscript welcomes contributions in the form of Pull Requests.</p> <p>goboscript is written in Rust. You'll need to install the Rust toolchain for development.</p> <p>[!NOTE] To install goboscript, follow instructions at aspizu.github.io/goboscript. These instructions are for people who want to develop goboscript itself.</p> <pre><code>git clone https://github.com/aspizu/goboscript\ncd goboscript\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>After cloning the repository, run goboscript locally from the repository root with:</p> <pre><code>cargo run -- build -i your_project/\n</code></pre> <p>But, to make development easier, and to validate the generated Scratch project - use the <code>tools/run</code> script:</p> <pre><code>tools/run compile\n</code></pre> <p>This assumes that you have set-up a testing project at <code>playground/</code>. It will compile the project, validate it using the schemas from <code>scratch-parser</code>. If the validation fails, Scratch will refuse to load the project. To further debug the project, the generated <code>project.json</code> file is extracted from the <code>.sb3</code> file in the <code>playground/</code> directory.</p> <p>Lets say that you modified the generated project in the Scratch editor or Turbowarp, and you want to look at the <code>project.json</code>. You can extract it with:</p> <pre><code>tools/run uncompile\n</code></pre> <p>Lets say that goboscript produced a broken project, and you are able to fix it by hand - by modifying the <code>project.json</code>. You can add back the <code>project.json</code> to the <code>.sb3</code> file with:</p> <pre><code>tools/run patch\n</code></pre> <p>If you want to validate some <code>.sb3</code> file, use:</p> <pre><code>tools/run check path/to/project.sb3\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>goboscript uses a <code>goboscript.toml</code> configuration file to store project-specific configuration.</p>"},{"location":"configuration/#turbowarp-options","title":"Turbowarp options","text":"<p>goboscript can generate a turbowarp configuration comment inside the Stage. https://docs.turbowarp.org/advanced-settings</p>"},{"location":"configuration/#frame-rate","title":"Frame Rate","text":"<pre><code>frame_rate = 60\n</code></pre>"},{"location":"configuration/#max-clones","title":"Max Clones","text":""},{"location":"configuration/#default","title":"Default","text":"<pre><code>max_clones = 300\n</code></pre>"},{"location":"configuration/#infinite-clones","title":"Infinite Clones","text":"<pre><code>max_clones = inf\n</code></pre>"},{"location":"configuration/#no-miscellaneous-limits","title":"No Miscellaneous Limits","text":"<pre><code>no_miscellaneous_limits = true\n</code></pre>"},{"location":"configuration/#no-sprite-fencing","title":"No Sprite Fencing","text":"<pre><code>no_sprite_fencing = true\n</code></pre>"},{"location":"configuration/#frame-interpolation","title":"Frame Interpolation","text":"<pre><code>frame_interpolation = true\n</code></pre>"},{"location":"configuration/#high-quality-pen","title":"High Quality Pen","text":"<pre><code>high_quality_pen = true\n</code></pre>"},{"location":"configuration/#stage-width-height","title":"Stage Width &amp; Height","text":"<pre><code>stage_width = 640\nstage_height = 480\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The goboscript compiler is a command-line program. You can create a new project using the <code>new</code> command. (run <code>goboscript new --help</code> for more information)</p>"},{"location":"getting-started/#create-a-new-project","title":"Create a new project","text":"<p>Create a new folder, and make sure that your working-directory is set to that folder.</p> <pre><code>goboscript new\n</code></pre> <p>This will create a new project with the following structure:</p> <pre><code>.\n\u251c\u2500\u2500 blank.svg\n\u251c\u2500\u2500 main.gs\n\u251c\u2500\u2500 stage.gs\n\u2514\u2500\u2500 goboscript.toml\n</code></pre> <p>Depending on what options you chose, it might create a <code>goboscript.toml</code> configuration file.</p> <p>Each <code>.gs</code> file holds the code for a sprite, the name of the sprite is the name of the file without the <code>.gs</code> extension.</p> <p><code>stage.gs</code> holds the code for the Stage. Scratch does not allow you to name a sprite <code>Stage</code>, so creating a file with the name <code>Stage.gs</code> is invalid. As goboscript uses <code>stage.gs</code> for the Stage, you also cannot name a sprite <code>stage</code> (in lowercase).</p> <p><code>blank.svg</code> is a blank costume. You can see that both the main sprite and the Stage have the line:</p> <pre><code>costumes \"blank.svg\";\n</code></pre> <p>This is used to add a costume to a sprite (or the Stage), see language/costumes for more information.</p>"},{"location":"getting-started/#compile-the-project","title":"Compile the project","text":"<p>To compile the project, run the following command:</p> <pre><code>goboscript build\n</code></pre> <p>This will compile the project into a <code>.sb3</code> file. The <code>.sb3</code> file will be placed in the project directory. It will have the same name as the project directory.</p> <p>Run <code>goboscript build --help</code> for more information.</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#install-from-source","title":"Install from source","text":"<p>You will need <code>git</code>, and the rust toolchain installed.</p> <pre><code>git clone https://github.com/aspizu/goboscript\ncd goboscript\ncargo install --path .\n</code></pre> <p>To update the installation:</p> <pre><code>cd goboscript\ngit pull\ncargo install --path .\n</code></pre>"},{"location":"standard-library/","title":"Standard Library","text":"<p>The standard library is a collection of useful procedures, functions and macros that can be used in any goboscript project.</p>"},{"location":"standard-library/#standard-library-headers","title":"Standard library headers","text":"Header Description <code>std/math</code> Mathematical operations <code>std/string</code> String manipulation <code>std/algo</code> Various algorithms <code>std/emoji</code> Emoji database <p>Include a header using the <code>%include</code> directive.</p> <pre><code>%include std/math\n</code></pre> <p>goboscript's dead code elimination will remove any unused procedures and functions from the compiled project.</p>"},{"location":"editor-integration/notepad%2B%2B/","title":"Notepad++","text":""},{"location":"editor-integration/notepad%2B%2B/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Copy the <code>/editors/notepad++/goboscript.udl.xml</code> file to the Notepad++ user defined language directory.</p> <p>Language &gt; User Defined Language &gt; Open User Defined Language Folder...</p>"},{"location":"editor-integration/sublime-text/","title":"Sublime Text","text":""},{"location":"editor-integration/sublime-text/#sublime-text","title":"Sublime Text","text":"<p>The Sublime Text extension provides syntax highlighting.</p>"},{"location":"editor-integration/sublime-text/#install-from-source","title":"Install from source","text":"<p>in Sublime Text, click <code>Preferences &gt; Browse Packages...</code> to open up the Packages folder, and then copy <code>editors/sublime/goboscript.sublime-syntax</code> into the Packages folder</p>"},{"location":"editor-integration/turbowarp-desktop/","title":"TurboWarp Desktop","text":""},{"location":"editor-integration/turbowarp-desktop/#instant-project-reload","title":"Instant Project Reload","text":"<p>This will add a keyboard shortcut to instantly reload the project in TurboWarp Desktop using Ctrl+B</p> <p>Open the user data folder using:  <code>Settings</code> &gt; <code>Desktop Settings</code> &gt; <code>Open User Data</code></p> <p>Create a file called <code>userscript.js</code> and add the following code:</p> <pre><code>window.addEventListener('keyup', async (event) =&gt; {\n  if (!(event.key === 'b' &amp;&amp; event.ctrlKey)) return\n  event.preventDefault()\n  const id = await EditorPreload.getInitialFile()\n  if (id === null) return\n  const file = await EditorPreload.getFile(id)\n  await vm.loadProject(file.data)\n})\n</code></pre> <p>Restart TurboWarp Desktop including all open windows.</p> <p>Thanks to GarboMuffin for this code.</p>"},{"location":"editor-integration/vscode/","title":"Visual Studio Code","text":""},{"location":"editor-integration/vscode/#visual-studio-code","title":"Visual Studio Code","text":"<p>The VSCode extension provides code snippets and syntax highlighting.</p>"},{"location":"editor-integration/vscode/#install-from-source","title":"Install from source","text":"<p>You will need <code>npm</code> installed.</p> <pre><code># Inside the root of the goboscript git repository:\ncd editors/code\nnpm install\nnpm run package\n</code></pre> <p>This will output a <code>goboscript.vsix</code> file in the <code>editors/code</code> directory. You can install it by pressing Ctrl+Shift+P and typing <code>Extensions: Install from VSIX...</code>.</p>"},{"location":"editor-integration/vscode/#configure-build-task","title":"Configure Build Task","text":"<p>You can configure the goboscript build task to get diagnostics in vscode.</p> <p>Add to <code>.vscode/tasks.json</code>:</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"goboscript-build\",\n      \"problemMatcher\": [\"$rustc\"],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"label\": \"Build .sb3\"\n    }\n  ]\n}\n</code></pre> <p>Either press Ctrl+Shift+B or run <code>Tasks: Run Task</code> and select <code>Build .sb3</code>.</p>"},{"location":"language/blocks/","title":"Blocks","text":"<p>The general syntax for blocks is:</p> <pre><code>block_name arg1, arg2;\n</code></pre>"},{"location":"language/control-flow/","title":"Control Flow","text":""},{"location":"language/control-flow/#repeat-n-times","title":"repeat n times","text":"<pre><code>repeat n {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#repeat-until-condition","title":"repeat until condition","text":"<pre><code>until condition == true {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#for-each-loop","title":"for each loop","text":"<pre><code>for x in n {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#for-loop","title":"for loop","text":"<pre><code>for x = 0; x &gt; n; x++ {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#forever-loop","title":"forever loop","text":"<pre><code>forever {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if","title":"if","text":"<pre><code>if condition {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-else","title":"if else","text":"<pre><code>if condition {\n    # code\n}\nelse {\n    # code\n}\n</code></pre>"},{"location":"language/control-flow/#if-elif","title":"if elif","text":"<pre><code>if condition {\n    # code\n}\nelif condition {\n    # code\n}\n</code></pre>"},{"location":"language/costumes/","title":"Costumes","text":"<p>You can add costumes to a sprite by specifying their file paths relative to the project directory.</p> <pre><code>costumes \"path/to/costume.svg\";\n</code></pre>"},{"location":"language/costumes/#listing-multiple-costumes","title":"Listing Multiple Costumes","text":"<p>To add multiple costumes, separate their file paths with commas. Costumes will appear in the order you list them in the <code>costumes</code> statement.</p> <pre><code>costumes \"path/to/costume1.svg\", \"path/to/costume2.svg\";\n</code></pre> <p>Each costume's name is taken from the file name without its extension.</p>"},{"location":"language/costumes/#renaming-costumes","title":"Renaming Costumes","text":"<p>You can rename a costume using the <code>as</code> keyword.</p> <pre><code>costumes \"path/to/costume.svg\" as \"new name\";\n</code></pre>"},{"location":"language/costumes/#using-wildcards-globs","title":"Using Wildcards (Globs)","text":"<p>You can use wildcards to include multiple costumes, such as all <code>.svg</code> files in a directory. Use the <code>*</code> wildcard for this.</p> <pre><code>costumes \"path/to/costumes/*.svg\";\n</code></pre> <p>Costumes added this way are sorted alphabetically.</p>"},{"location":"language/costumes/#generating-costumes-for-text-engines-and-case-detection","title":"Generating costumes for text engines and case detection","text":"<p>Scratch compares strings case-insensitively. Switching costumes is, however, case-sensitive. This can be utilized to detect the case of a character by first switching to the costume named by the character, then using the costume number to detect the case.</p> <p>For example, if you have a costume named \"A\" at position 1, and a costume named \"a\" at position 2, you can use the following code to detect the case of a character:</p> <pre><code>switch_costume char;\nif costume_number() == 1 {\n    say \"upper case A\";\n} else {\n    say \"lower case a\";\n}\n</code></pre> <p>Its useful to have one costume for each printable character in the ASCII set. This will allow you to get the ASCII value of any printable character.</p> <p>Writing <code>costumes \"blank.svg\" as \"A\", \"blank.svg\" as \"B\" ...</code> for each printable character is a pain.</p> <p>goboscript provides a special declaration for generating such costumes automatically.</p> <pre><code>costumes \"blank.svg\" as \"@ascii/PREFIX\";\n</code></pre> <p>This will generate costumes for all printable characters in the ASCII set, with the prefix \"PREFIX\". For example, if the prefix is \"A\", the costumes will be named \"A0\", \"A1\", etc.</p> <p>If you do not wish to have a prefix, leave it blank. (i.e. <code>@ascii/</code>)</p> <p>Given that these are placed at the beginning of the costumes list, you can get the ASCII value of a character by adding <code>31</code> to the costume number.</p>"},{"location":"language/custom-blocks/","title":"Custom Blocks","text":"<p>Custom blocks are called procedures.</p> <pre><code>proc my_procedure arg1, arg2, type_name arg_name {\n    # code\n}\n</code></pre>"},{"location":"language/custom-blocks/#arguments","title":"Arguments","text":"<p>Use arguments by prefixing <code>$</code> to the argument name.</p> <pre><code>proc my_procedure arg1, arg2 {\n    say $arg1;\n}\n</code></pre>"},{"location":"language/custom-blocks/#calling-custom-blocks","title":"Calling custom blocks","text":"<pre><code>my_procedure arg1, arg2;\n</code></pre>"},{"location":"language/enums/","title":"Enums","text":"<p>Enum variants will automatically be assigned a value starting from 0.</p> <pre><code>enum Direction {\n    North, #    0\n    East,  #    1\n    South, #    2\n    West   #    3\n}\n</code></pre> <p>An explicit value can be given to an enum variant.</p> <pre><code>enum Direction {\n    North = \"North\",\n    East = \"East\",\n    South = \"South\",\n    West = \"West\"\n}\n</code></pre> <p>Explicit values and implicit values can be mixed.</p> <pre><code>enum Direction {\n    A = \"A\",\n    B, #       0\n    C = \"C\",\n    D, #       1\n    E = 2,\n    F, #       3\n\n}\n\n## Get enum value\n\n```goboscript\nsay Direction.North;\n</code></pre>"},{"location":"language/functions/","title":"Functions","text":"<p>Functions are procedures (custom blocks) that can return values (or structs). Functions are always Run without screen refresh and must be only called within Run without screen refresh procedures or functions to prevent undefined behavior. Functions must always terminate with a return statement. Using <code>stop_this_script</code> inside functions is undefined behavior.</p>"},{"location":"language/functions/#declaring-a-function","title":"Declaring a function","text":"<pre><code>func my_function(x, y) {\n    return $x + $y;\n}\n</code></pre> <pre><code>func my_function(x, y) type_name {\n    return type_name { ... };\n}\n</code></pre>"},{"location":"language/functions/#calling-a-function","title":"Calling a function","text":"<pre><code>say my_function(1, 2);\n</code></pre>"},{"location":"language/hat-blocks/","title":"Hat Blocks","text":""},{"location":"language/hat-blocks/#when-green-flag-clicked","title":"When Green Flag Clicked","text":"<pre><code>onflag {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-key-pressed","title":"When Key Pressed","text":"<pre><code>onkey \"enter\" {\n   # code \n}\n</code></pre>"},{"location":"language/hat-blocks/#when-this-sprite-clicked","title":"When This Sprite Clicked","text":"<pre><code>onclick {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-backdrop-switches-to","title":"When Backdrop Switches To","text":"<pre><code>onbackdrop \"backdrop\" {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-loudness","title":"When Loudness &gt;","text":"<pre><code>onloudness &gt; 100 {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-timer","title":"When Timer &gt;","text":"<pre><code>ontimer &gt; 100 {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-i-start-as-a-clone","title":"When I Start As A Clone","text":"<pre><code>onclone {\n    # code\n}\n</code></pre>"},{"location":"language/hat-blocks/#when-i-receive-message","title":"When I Receive Message","text":"<pre><code>on \"message name\" {\n    # code\n}\n</code></pre>"},{"location":"language/lists/","title":"Lists","text":"<p>The same rules apply for lists as for variables regarding for all sprites and for this sprite only.</p>"},{"location":"language/lists/#declaration","title":"Declaration","text":"<pre><code>list list_name;\n</code></pre> <pre><code>list type_name list_name;\n</code></pre>"},{"location":"language/lists/#operations","title":"Operations","text":""},{"location":"language/lists/#add-item-to-list","title":"Add item to list","text":"<pre><code>add value to list_name;\n</code></pre>"},{"location":"language/lists/#delete-item-from-list-at-index","title":"Delete item from list at index","text":"<pre><code>delete list_name[index];\n</code></pre>"},{"location":"language/lists/#delete-all-items-from-list","title":"Delete all items from list","text":"<pre><code>delete list_name;\n</code></pre>"},{"location":"language/lists/#insert-item-at-index-in-list","title":"Insert item at index in list","text":"<pre><code>insert value at list_name[index];\n</code></pre>"},{"location":"language/lists/#replace-item-at-index-in-list","title":"Replace item at index in list","text":"<pre><code>list_name[index] = value;\n</code></pre>"},{"location":"language/lists/#get-item-at-index-in-list","title":"Get item at index in list","text":"<pre><code>value = list_name[index];\n</code></pre>"},{"location":"language/lists/#get-index-of-item-in-list","title":"Get index of item in list","text":"<pre><code>index in item\n</code></pre>"},{"location":"language/lists/#get-length-of-list","title":"Get length of list","text":"<pre><code>len = length list_name;\n</code></pre>"},{"location":"language/lists/#check-if-item-is-in-list","title":"Check if item is in list","text":"<pre><code>if value in list_name {\n    ...\n}\n</code></pre>"},{"location":"language/lists/#showhide-list-monitor","title":"Show/Hide List Monitor","text":"<pre><code>show list_name;\n</code></pre> <pre><code>hide list_name;\n</code></pre>"},{"location":"language/lists/#get-randomlast-item-in-list","title":"Get random/last item in list","text":"<pre><code>value = list_name[\"random\"];\n</code></pre> <pre><code>value = list_name[\"last\"];\n</code></pre>"},{"location":"language/lists/#compound-assignment","title":"Compound Assignment","text":"Operator Implementation <code>list_name[index]++;</code> <code>list_name[index]--;</code> <code>list_name[index] += y;</code> <code>list_name[index] -= y;</code> <code>list_name[index] *= y;</code> <code>list_name[index] /= y;</code> <code>list_name[index] //= y;</code> <code>list_name[index] %= y;</code> <code>list_name[index] &amp;= y;</code>"},{"location":"language/lists/#list-data","title":"List Data","text":"<p>Initial data for lists can be stored inside the project. This behaves the same way loading text files into lists works in the Scratch editor. In addition to loading text  files, you can also load data from various scripts and commands. This is useful for creating look-up tables or loading data from images or videos.</p>"},{"location":"language/lists/#loading-data-from-text-files","title":"Loading data from text files","text":"<p>Each line in the text file will be added to the list as a separate item.</p> <pre><code>list list_name = file ```path/to/file.txt```;\n</code></pre>"},{"location":"language/lists/#loading-data-from-bash-script","title":"Loading data from bash script","text":"<p>The bash script enclosed in triple-backticks will be executed, and the standard output will be stored in the list, one item per line. The working directory will be set to the  project directory.</p> <pre><code>list list_name = ```cat path/to/file.txt```;\n</code></pre>"},{"location":"language/lists/#loading-data-from-any-other-program","title":"Loading data from any other program","text":"<p>The name of the program may be specified before the triple-backticks. This program will be executed with the standard input set to the script enclosed in the triple-backticks. The standard output will be stored in the list, one item per line. The working directory will be set to the project directory.</p> <p>Any program that accepts input from stdin and outputs to stdout can be used.</p> <p>For example, to load data from a python script:</p> <pre><code>list list_name = python ```\nimport random\nfor _ in range(5):\n    print(random.randint(-5, 5))\n```;\n</code></pre> <p>Tip</p> <p>If your script takes a long time to run, you can use bash to cache the output of the script.</p> <p>Let's say that your script converts a file <code>DEPENDENCY.txt</code>. You wish to only re-run the script if the file <code>DEPENDENCY.txt</code> has changed. We can use stat to get the last modification time of the file.</p> <pre><code>TIME=$(stat -c %Y DEPENDENCY.txt)\nif [ $TIME -eq $(&lt; DEPENDENCY.time)]; then\n    cat DEPENDENCY.cached\n    exit\nfi\necho $TIME &gt; DEPENDENCY.time\npython convert_file.py DEPENDENCY.txt | tee DEPENDENCY.cached\n</code></pre>"},{"location":"language/lists/#struct-list-data","title":"Struct List Data","text":"<p>If the list's type is a struct, each field will be filled with the value of the corresponding line in the data.</p> <p>Example:</p> <pre><code>struct vec3d { x, y, z };\nlist vec3d points = file ```file.txt```;\n</code></pre> <p>contents of <code>file.txt</code>: <pre><code>10\n20\n30\n40\n50\n60\n</code></pre></p> <p>resulting in the following list:</p> <pre><code>[\n    vec3d {\n        x: 10,\n        y: 20,\n        z: 30\n    },\n    vec3d {\n        x: 40,\n        y: 50,\n        z: 60\n    }\n]\n</code></pre>"},{"location":"language/macros/","title":"Macros","text":"<p>goboscript has a C-like preprocessor. This allows you to define macros and include files.</p> <p>Note</p> <p>The preprocessor directives start with a <code>%</code> character. The <code>%</code> character must always appear at the start of a line. There cannot be any indentation before the <code>%</code> character.</p>"},{"location":"language/macros/#include","title":"Include","text":"<p>Include the contents of a file.</p> <pre><code>%include path/to/file.gs\n</code></pre> <p>The <code>.gs</code> extension is optional. If not specified, the file extension will be added automatically. (This is recommended)</p> <p>If the include path is a directory, the file inside the directory with the same name as the directory will be included.</p>"},{"location":"language/macros/#define","title":"Define","text":"<p>Define a macro. That identifier will be substituted with the subsequent text.</p> <pre><code>%define macro_name replacement text\n</code></pre>"},{"location":"language/macros/#define-with-arguments","title":"Define with arguments","text":"<p>Define a macro with arguments. The arguments will be substituted with the tokens from the callsite.</p> <pre><code>%define macro_name(arg1, arg2) replacement text\n</code></pre>"},{"location":"language/macros/#remove-a-macro-definition","title":"Remove a macro definition","text":"<pre><code>%undef macro_name\n</code></pre>"},{"location":"language/macros/#conditional-compilation","title":"Conditional compilation","text":"<pre><code>%if macro_name\n    code\n%endif\n</code></pre> <pre><code>%if not macro_name\n    code\n%endif\n</code></pre>"},{"location":"language/operators/","title":"Operators","text":""},{"location":"language/operators/#unary-operators","title":"Unary Operators","text":"Operator Implementation <code>not x == true</code> <code>length x</code> <code>round x</code> <code>abs x</code> <code>floor x</code> <code>ceil x</code> <code>sqrt x</code> <code>sin x</code> <code>cos x</code> <code>tan x</code> <code>asin x</code> <code>acos x</code> <code>atan x</code> <code>ln x</code> <code>log x</code> <code>antiln x</code> <code>antilog x</code>"},{"location":"language/operators/#binary-operators","title":"Binary Operators","text":"Operator Implementation <code>x + y</code> <code>x - y</code> <code>x * y</code> <code>x / y</code> <code>x // y</code> <code>x % y</code> <code>x &amp; y</code> <code>x == y</code> <code>x != y</code> <code>x &lt; y</code> <code>x &lt;= y</code> <code>x &gt; y</code> <code>x &gt;= y</code> <code>x == true and y == true</code> <code>x == true or y == true</code> <code>x in y</code> <code>x not in y</code> <code>x[y]</code>"},{"location":"language/operators/#random","title":"Random","text":"<pre><code>random(x, y)\n</code></pre>"},{"location":"language/reporters/","title":"Reporters","text":"<p>The general syntax for reporters is:</p> <pre><code>reporter_name(arg1, arg2)\n</code></pre>"},{"location":"language/structs/","title":"Structs","text":"<p>Structs are a way to group related variables or lists together.</p>"},{"location":"language/structs/#declaration","title":"Declaration","text":"<pre><code>struct my_struct {\n    x,\n    y,\n    z\n}\n</code></pre>"},{"location":"language/structs/#usage","title":"Usage","text":""},{"location":"language/structs/#declaring-a-struct-variable","title":"Declaring a struct variable","text":"<pre><code>my_struct my_variable = value;\n</code></pre>"},{"location":"language/structs/#declaring-a-struct-list","title":"Declaring a struct list","text":"<pre><code>list my_struct my_list;\n</code></pre>"},{"location":"language/structs/#accessing-struct-fields","title":"Accessing struct fields","text":""},{"location":"language/structs/#accessing-a-struct-variable-field","title":"Accessing a struct variable field","text":"<pre><code>my_variable.my_field\n</code></pre>"},{"location":"language/structs/#accessing-a-struct-argument-field","title":"Accessing a struct argument field","text":"<pre><code>$my_argument.my_field\n</code></pre>"},{"location":"language/structs/#accessing-a-struct-list-field","title":"Accessing a struct list field","text":"<pre><code>my_list[index].my_field\n</code></pre>"},{"location":"language/structs/#struct-literals","title":"Struct literals","text":"<p>Struct literals are a way to create structs.</p> <pre><code>my_struct my_variable = my_struct {\n    x: 10,\n    y: 20,\n    z: 30\n};\n</code></pre>"},{"location":"language/structs/#passing-structs","title":"Passing structs","text":"<p>You can pass structs to procedures via arguments or variables.</p> <pre><code>list my_struct my_list;\n\nproc my_procedure my_struct arg {\n    # code\n}\n\nonflag {\n    my_procedure my_struct {\n        x: 10,\n        y: 20,\n        z: 30\n    };\n    my_procedure my_list[1];\n}\n</code></pre> <pre><code>onflag {\n    my_struct foo = my_struct {\n        x: 10,\n        y: 20,\n        z: 30\n    };\n    my_struct bar = foo;\n}\n</code></pre>"},{"location":"language/syntax/","title":"Syntax","text":"<p>goboscript has a syntax inspired from languages such as C, Rust, and Python. Whitespace and indentation has no semantic significance. Statements end in semicolons.</p>"},{"location":"language/syntax/#comments","title":"Comments","text":"<pre><code># single-line comments are the only option.\n</code></pre>"},{"location":"language/syntax/#numbers","title":"Numbers","text":"<pre><code>0b111 # Binary:      8\n0xFF  # Hexadecimal: 255\n0o777 # Octal:       511\n1024  # Decimal:     1024\n3.141 # Float:       3.141\n</code></pre>"},{"location":"language/syntax/#strings","title":"Strings","text":"<pre><code>\"Hello, World!\"\n\"Hello, \\\"World\\\"!\"\n\"\\u1234\" # Unicode escape\n\"\\n\" # Newline\n\"\\t\" # Tab\n</code></pre>"},{"location":"language/syntax/#booleans","title":"Booleans","text":"<p><code>true</code> is replaced with <code>1</code> during compilation.</p> <p><code>false</code> is replaced with <code>0</code> during compilation.</p>"},{"location":"language/syntax/#boolean-coercion","title":"Boolean Coercion","text":"<p>Scratch does not allow placing a non-boolean block inside a boolean input. (With the exception of item # of list and item of list). goboscript will automatically coerce non-boolean blocks into conditions by wrapping them in a comparison with <code>1</code>.</p> <pre><code>if timer() {\n    ...\n}\n</code></pre> <p>is equivalent to</p> <pre><code>if timer() == 1 {\n    ...\n}\n</code></pre>"},{"location":"language/variables/","title":"Variables","text":""},{"location":"language/variables/#declarationassignment","title":"Declaration/Assignment","text":"<p>The first assignment to a variable is considered its declaration.</p> <pre><code>variable_name = value;\n</code></pre> <pre><code>type_name variable_name = value;\n</code></pre>"},{"location":"language/variables/#variables-for-all-sprites","title":"Variables for all sprites","text":"<p>If a variable is assigned to in <code>stage.gs</code>, it will be declared as for all sprites.</p>"},{"location":"language/variables/#variables-for-this-sprite-only","title":"Variables for this sprite only","text":"<p>Variables are by-default declared as for this sprite only. If you want to declare a variable for all sprites, assign to it in <code>stage.gs</code>.</p>"},{"location":"language/variables/#local-variables","title":"Local Variables","text":"<p>Local variables are accessible only within the procedure they are declared in.</p> <p>The first assignment with the <code>local</code> keyword will declare a local variable, all further uses of the variable will refer to the local variable. If a normal variable with the same name exists, it will be shadowed.</p> <pre><code>proc my_procedure {\n    local x = 0;\n    x = x + 1;\n}\n</code></pre> <p>In the compiled Scratch project, the variable <code>x</code> will be named as <code>my_procedure:x</code>.</p> <p>Note</p> <p>Local variables will have undefined behavior if the procedure is recursive, or is NOT a run-without-screen-refresh procedure.</p>"},{"location":"language/variables/#compound-assignment","title":"Compound Assignment","text":"Operator Implementation <code>x++;</code> <code>x--;</code> <code>x += y;</code> <code>x -= y;</code> <code>x *= y;</code> <code>x /= y;</code> <code>x //= y;</code> <code>x %= y;</code> <code>x &amp;= y;</code>"},{"location":"language/variables/#showhide-variable-monitor","title":"Show/Hide Variable Monitor","text":"<pre><code>show variable_name;\n</code></pre> <pre><code>hide variable_name;\n</code></pre>"}]}